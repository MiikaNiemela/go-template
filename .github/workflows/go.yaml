name: Go

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main
  release:
    types:
      - published

env:
  IS_PR: ${{github.event_name == 'pull_request' || ''}}
  IS_MAIN: ${{github.event_name == 'push' || ''}}
  IS_RELEASE: ${{github.event_name == 'release' || ''}}
  IMG_REG: ghcr.io
  IMG_REPO: ${{ github.repository }}

jobs:
  build:
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Download dependencies
        run: go mod download

      - name: Verify code base on PR
        if: ${{ env.IS_PR }}
        env:
          BASE_REF: ${{ github.base_ref }}
          HEAD_REF: ${{ github.head_ref }}
        run: make .pr-check

      - name: Verify code base on push
        if: ${{ env.IS_MAIN }}
        run: make .main-check

      - name: Unit test
        run: make test/unit

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unit
          files: ./target/test/unit/cov/txt/cover.txt

      - name: Upload unit test results
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unit
          files: ./target/test/unit/junit/junit.xml

      - name: Application test
        run: make test/application

      - name: Upload application test
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: application
          files: ./target/test/application/cov/txt/cover.txt

      - name: Upload application test results
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: application
          files: ./target/test/application/junit/junit.xml

      - name: Restore linter cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-lint-cache

      - name: Lint
        run: make lint

      - name: Save linter cache
        if: ${{ env.IS_MAIN }}
        uses: actions/cache/save@v4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-lint-cache

      - name: Build binaries
        run: make bin

      - name: Build images
        env:
          IMG_TAGS: ${{ env.IS_PR && github.event.pull_request.head.sha }} ${{ env.IS_MAIN && github.sha }} ${{ env.IS_RELEASE && github.ref_name }} ${{ env.IS_RELEASE && 'latest' }}
        run: make img

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.IMG_REG }}
          username: ${{ env.IMG_REPO }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish images
        if: ${{ env.IS_MAIN || env.IS_RELEASE }}
        run: make .push
